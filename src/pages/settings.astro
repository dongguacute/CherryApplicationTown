---
import Layout from '../layouts/Layout.astro';
---

<Layout>
  <div class="settings-page" style="background-color: var(--bg-primary); min-height: calc(100vh - 80px);">
    <div class="settings-container max-w-7xl mx-auto p-6">
      <h1 class="text-4xl font-bold mb-8" style="color: var(--text-primary);">Settings</h1>
      
      <div class="settings-layout flex gap-6">
        <!-- Â∑¶ÂÅ¥Â∞éËà™ -->
        <aside class="settings-sidebar w-80 flex-shrink-0 sticky top-24 h-fit">
          <div class="sidebar-section rounded-xl p-4" style="background-color: var(--card-bg); box-shadow: var(--shadow);">
            <h2 class="text-sm font-semibold mb-3 text-rose-500 uppercase">Display</h2>
            <button class="sidebar-item w-full flex items-center gap-3 px-4 py-3 rounded-lg bg-rose-500 hover:bg-rose-600 text-white font-medium transition-colors">
              <span class="text-xl">üé®</span>
              <span>Appearance</span>
            </button>
          </div>
        </aside>

        <!-- Âè≥ÂÅ¥ÂÖßÂÆπ -->
        <main class="settings-content flex-1">
          <div class="content-card rounded-xl p-8" style="background-color: var(--card-bg); box-shadow: var(--shadow);">
            <h2 class="text-3xl font-bold mb-3" style="color: var(--text-primary);">Color theme</h2>
            <p class="text-gray-600 mb-8">Select your preferred color theme for Cherry App Store on this device.</p>
            
            <div class="theme-options grid grid-cols-2 gap-4">
              <!-- Sync with system -->
              <label class="theme-card cursor-pointer">
                <input type="radio" name="theme" value="auto" class="hidden theme-radio" checked />
                <div class="card-inner rounded-xl p-4 border-2 transition-all" style="background-color: var(--bg-secondary); border-color: var(--border-color);">
                  <div class="preview-area rounded-lg mb-4 p-6 flex items-center justify-center" style="background: linear-gradient(135deg, #e5e7eb 0%, #e5e7eb 50%, #1f2937 50%, #1f2937 100%); height: 120px;">
                    <div class="preview-card bg-white rounded-lg shadow-md p-3 w-32" style="box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                      <div class="flex items-center gap-2 mb-2">
                        <div class="w-6 h-6 bg-gray-300 rounded"></div>
                        <div class="flex-1">
                          <div class="h-2 bg-gray-800 rounded mb-1"></div>
                          <div class="h-2 bg-gray-800 rounded w-3/4"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="flex items-center gap-2">
                    <div class="radio-indicator w-5 h-5 rounded-full border-2 border-gray-400 flex items-center justify-center">
                      <div class="radio-dot w-3 h-3 rounded-full bg-rose-500 hidden"></div>
                    </div>
                    <span class="font-medium" style="color: var(--text-primary);">Sync with system</span>
                  </div>
                </div>
              </label>

              <!-- Light -->
              <label class="theme-card cursor-pointer">
                <input type="radio" name="theme" value="light" class="hidden theme-radio" />
                <div class="card-inner rounded-xl p-4 border-2 transition-all" style="background-color: var(--bg-secondary); border-color: var(--border-color);">
                  <div class="preview-area rounded-lg mb-4 p-6 flex items-center justify-center" style="background-color: #e5e7eb; height: 120px;">
                    <div class="preview-card bg-white rounded-lg shadow-md p-3 w-32" style="box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                      <div class="flex items-center gap-2 mb-2">
                        <div class="w-6 h-6 bg-gray-300 rounded"></div>
                        <div class="flex-1">
                          <div class="h-2 bg-gray-800 rounded mb-1"></div>
                          <div class="h-2 bg-gray-800 rounded w-3/4"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="flex items-center gap-2">
                    <div class="radio-indicator w-5 h-5 rounded-full border-2 border-gray-400 flex items-center justify-center">
                      <div class="radio-dot w-3 h-3 rounded-full bg-rose-500 hidden"></div>
                    </div>
                    <span class="font-medium" style="color: var(--text-primary);">Light ‚òÄÔ∏è</span>
                  </div>
                </div>
              </label>

              <!-- Dark -->
              <label class="theme-card cursor-pointer">
                <input type="radio" name="theme" value="dark" class="hidden theme-radio" />
                <div class="card-inner rounded-xl p-4 border-2 transition-all" style="background-color: var(--bg-secondary); border-color: var(--border-color);">
                  <div class="preview-area rounded-lg mb-4 p-6 flex items-center justify-center" style="background-color: #000000; height: 120px;">
                    <div class="preview-card rounded-lg shadow-md p-3 w-32" style="background-color: #1f2937; box-shadow: 0 2px 8px rgba(0,0,0,0.3);">
                      <div class="flex items-center gap-2 mb-2">
                        <div class="w-6 h-6 bg-gray-600 rounded"></div>
                        <div class="flex-1">
                          <div class="h-2 bg-gray-300 rounded mb-1"></div>
                          <div class="h-2 bg-gray-300 rounded w-3/4"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="flex items-center gap-2">
                    <div class="radio-indicator w-5 h-5 rounded-full border-2 border-gray-400 flex items-center justify-center">
                      <div class="radio-dot w-3 h-3 rounded-full bg-rose-500 hidden"></div>
                    </div>
                    <span class="font-medium" style="color: var(--text-primary);">Dark üåô</span>
                  </div>
                </div>
              </label>

              <!-- OLED -->
              <label class="theme-card cursor-pointer">
                <input type="radio" name="theme" value="oled" class="hidden theme-radio" />
                <div class="card-inner rounded-xl p-4 border-2 transition-all" style="background-color: var(--bg-secondary); border-color: var(--border-color);">
                  <div class="preview-area rounded-lg mb-4 p-6 flex items-center justify-center" style="background-color: #000000; height: 120px;">
                    <div class="preview-card rounded-lg shadow-md p-3 w-32" style="background-color: #000000; box-shadow: 0 2px 8px rgba(0,0,0,0.5); border: 1px solid #1f2937;">
                      <div class="flex items-center gap-2 mb-2">
                        <div class="w-6 h-6 bg-gray-700 rounded"></div>
                        <div class="flex-1">
                          <div class="h-2 bg-gray-400 rounded mb-1"></div>
                          <div class="h-2 bg-gray-400 rounded w-3/4"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="flex items-center gap-2">
                    <div class="radio-indicator w-5 h-5 rounded-full border-2 border-gray-400 flex items-center justify-center">
                      <div class="radio-dot w-3 h-3 rounded-full bg-rose-500 hidden"></div>
                    </div>
                    <span class="font-medium" style="color: var(--text-primary);">OLED</span>
                  </div>
                </div>
              </label>
            </div>
          </div>
        </main>
      </div>
    </div>
  </div>

  <script>
    // ‰∏ªÈ°åÂàáÊèõÈÇèËºØ
    const themeCards = document.querySelectorAll('.theme-card');
    const themeRadios = document.querySelectorAll('.theme-radio');

    // ÂàùÂßãÂåñÔºöÂæû localStorage ËºâÂÖ•‰∏ªÈ°å
    function initTheme() {
      // Á¢∫‰øù themeManager Â∑≤ËºâÂÖ•
      if (!(window as any).themeManager) {
        console.log('Theme manager not ready, retrying...');
        setTimeout(initTheme, 100);
        return;
      }

      const savedTheme = (window as any).themeManager.getCurrentTheme() || 'auto';
      console.log('Initializing theme UI with:', savedTheme);

      // ÂèñÊ∂àÊâÄÊúâÈÅ∏‰∏≠ÁãÄÊÖã
      document.querySelectorAll('.theme-radio').forEach(r => {
        (r as HTMLInputElement).checked = false;
      });

      const radio = document.querySelector(`input[value="${savedTheme}"]`) as HTMLInputElement;
      if (radio) {
        radio.checked = true;
        updateCardStyles(radio);
        console.log('Theme UI updated to:', savedTheme);
      } else {
        // Â¶ÇÊûúÊ≤íÊúâÊâæÂà∞Â∞çÊáâÁöÑ radioÔºåÈªòË™çÈÅ∏Êìá auto
        const autoRadio = document.querySelector('input[value="auto"]') as HTMLInputElement;
        if (autoRadio) {
          autoRadio.checked = true;
          updateCardStyles(autoRadio);
          console.log('Defaulted to auto theme');
        }
      }
    }

    // Êõ¥Êñ∞Âç°ÁâáÊ®£Âºè
    function updateCardStyles(selectedRadio: HTMLInputElement) {
      console.log('Updating card styles for:', selectedRadio.value);
      const allCards = document.querySelectorAll('.theme-card');
      console.log('Found cards:', allCards.length);

      allCards.forEach(card => {
        const radio = card.querySelector('.theme-radio') as HTMLInputElement;
        const cardInner = card.querySelector('.card-inner') as HTMLElement;
        const radioDot = card.querySelector('.radio-dot') as HTMLElement;
        const radioIndicator = card.querySelector('.radio-indicator') as HTMLElement;

        console.log('Checking radio:', radio?.value, 'selected:', radio === selectedRadio);

        if (radio === selectedRadio) {
          console.log('Setting active style for:', radio.value);
          cardInner.style.borderColor = '#f43f5e'; // Ê´ªÊ°ÉÁ≤âËâ≤
          radioDot.classList.remove('hidden');
          radioIndicator.style.borderColor = '#f43f5e';
          console.log('Applied active styles');
        } else {
          cardInner.style.borderColor = 'var(--border-color)';
          radioDot.classList.add('hidden');
          radioIndicator.style.borderColor = '#9ca3af';
        }
      });
    }

    // ÊáâÁî®‰∏ªÈ°å
    function applyTheme(theme: string) {
      // Áõ¥Êé•‰ΩøÁî®ÂÖ®Â±Ä‰∏ªÈ°åÁÆ°ÁêÜÂô®ÔºåÂÆÉÊúÉËôïÁêÜ cookies Â≠òÂÑ≤
      if ((window as any).themeManager) {
        (window as any).themeManager.setTheme(theme);
      }
    }


    // ÂÖ®Â±ÄÊ®ôË®òÁ¢∫‰øùÂè™ÂàùÂßãÂåñ‰∏ÄÊ¨°
    let isInitialized = false;

    // ÂàùÂßãÂåñÊâÄÊúâÂäüËÉΩ
    function initSettingsPage() {
      console.log('Initializing settings page...');

      // Á¢∫‰øùÂÖÉÁ¥†Â≠òÂú®
      const themeCards = document.querySelectorAll('.theme-card');
      console.log('Found theme cards:', themeCards.length);

      if (themeCards.length === 0) {
        console.log('No theme cards found, retrying in 100ms...');
        setTimeout(initSettingsPage, 100);
        return;
      }

      // Âè™ÂàùÂßãÂåñ‰∏ÄÊ¨°‰∏ªÈ°åUI
      if (!isInitialized) {
        initTheme();
        isInitialized = true;
      }

      // ÊØèÊ¨°ÈÉΩÈáçÊñ∞Á∂ÅÂÆö‰∫ã‰ª∂Áõ£ËÅΩÂô®
      bindEventListeners();

      console.log('Settings page initialized successfully');
    }

    // Á∂ÅÂÆö‰∫ã‰ª∂Áõ£ËÅΩÂô®
    function bindEventListeners() {
      // ÁßªÈô§ËàäÁöÑ‰∫ã‰ª∂Áõ£ËÅΩÂô®
      const themeContainer = document.querySelector('.theme-options');
      if (themeContainer) {
        const newContainer = themeContainer.cloneNode(true) as HTMLElement;
        themeContainer.parentNode?.replaceChild(newContainer, themeContainer);

        // ÈáçÊñ∞Á∂ÅÂÆöÈªûÊìä‰∫ã‰ª∂
        newContainer.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const card = target.closest('.theme-card') as HTMLElement;

          if (card) {
            e.preventDefault();
            const radio = card.querySelector('.theme-radio') as HTMLInputElement;
            if (radio) {
              console.log('Clicked theme:', radio.value);

              // ÂèñÊ∂àÊâÄÊúâÈÅ∏‰∏≠ÁãÄÊÖã
              document.querySelectorAll('.theme-radio').forEach(r => {
                (r as HTMLInputElement).checked = false;
              });

              // Ë®≠ÁΩÆÁï∂ÂâçÈÅ∏‰∏≠
              radio.checked = true;
              console.log('Setting radio checked:', radio.checked);
              updateCardStyles(radio);
              applyTheme(radio.value);
            }
          }
        });
      }
    }

    // È†ÅÈù¢ËºâÂÖ•ÊôÇÂàùÂßãÂåñ
    function onPageLoad() {
      if (window.location.pathname === '/settings') {
        console.log('Settings page loaded, initializing...');
        initSettingsPage();
      }
    }

    // Á´ãÂç≥Ê™¢Êü•Áï∂ÂâçÈ†ÅÈù¢
    onPageLoad();

    // Áõ£ËÅΩ SPA È†ÅÈù¢ËºâÂÖ•‰∫ã‰ª∂
    document.addEventListener('astro:page-load', () => {
      console.log('Astro page load event fired');
      setTimeout(() => {
        onPageLoad();
      }, 100);
    });

    // Áõ£ËÅΩ URL ËÆäÂåñ
    let currentPath = window.location.pathname;
    setInterval(() => {
      if (window.location.pathname !== currentPath) {
        console.log('URL changed from', currentPath, 'to', window.location.pathname);
        currentPath = window.location.pathname;
        if (currentPath === '/settings') {
          setTimeout(() => {
            initSettingsPage();
          }, 100);
        }
      }
    }, 100);
  </script>

  <style>
    .settings-layout {
      display: flex;
      gap: 1.5rem;
    }

    .theme-card:hover .card-inner {
      transform: translateY(-2px);
      box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    }

    .sidebar-item {
      transition: all 0.2s;
    }

    .sidebar-item:hover {
      transform: translateX(2px);
    }

    @media (max-width: 1024px) {
      .settings-layout {
        flex-direction: column;
      }

      .settings-sidebar {
        width: 100%;
      }

      .theme-options {
        grid-template-columns: 1fr;
      }
    }

    @media (min-width: 768px) and (max-width: 1024px) {
      .theme-options {
        grid-template-columns: repeat(2, 1fr);
      }
    }
  </style>
</Layout>