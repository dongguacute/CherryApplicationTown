---
import { ViewTransitions } from 'astro:transitions';
import Header from '../components/Header.astro';
import '../styles/global.css';
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>Cherry App Store</title>
		<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@900&display=swap" rel="stylesheet">
		<ViewTransitions />
		<script>
			// 主題管理腳本
			function initTheme() {
				const savedTheme = localStorage.getItem('cherry-theme') || 'auto';

				// 如果沒有保存的主題，自動識別系統主題並設置為 auto
				if (!localStorage.getItem('cherry-theme')) {
					localStorage.setItem('cherry-theme', 'auto');
				}

				applyTheme(savedTheme);

				// 監聽系統主題變化
				window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
					const currentTheme = localStorage.getItem('cherry-theme');
					if (currentTheme === 'auto') {
						applyTheme('auto');
					}
				});
			}

			// 應用主題
			function applyTheme(theme: string) {
				let actualTheme = theme;
				if (theme === 'auto') {
					const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
					actualTheme = prefersDark ? 'dark' : 'light';
				}
				// OLED 模式直接使用 'oled' 作為 data-theme 值
				document.documentElement.setAttribute('data-theme', actualTheme);
			}

			// 設置主題
			function setTheme(theme: string) {
				localStorage.setItem('cherry-theme', theme);
				applyTheme(theme);

				// 通知所有頁面主題已改變
				window.dispatchEvent(new CustomEvent('theme-changed', { detail: { theme } }));
			}

			// 獲取當前主題
			function getCurrentTheme() {
				return localStorage.getItem('cherry-theme') || 'auto';
			}

			// 確保在頁面載入時立即應用主題
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', initTheme);
			} else {
				initTheme();
			}

			// 監聽 View Transitions 事件，確保主題在頁面切換時保持
			document.addEventListener('astro:page-load', () => {
				const currentTheme = getCurrentTheme();
				applyTheme(currentTheme);
			});

			// 暴露全局函數供設定頁面使用
			(window as any).themeManager = { setTheme, getCurrentTheme };
		</script>
	</head>
	<body>
		<Header />
		<slot />
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
		padding-top: 80px; /* 為固定定位的 header 留出空間 */
	}
</style>
